---
/*
 * Copyright (c) Cynthia Rey et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import type { CollectionEntry } from 'astro:content'

import checkedSvg from 'feather-icons/dist/icons/check-circle.svg?raw'
import slashSvg from 'feather-icons/dist/icons/slash.svg?raw'

const DecorationElements = import.meta.glob('../assets/decorations/*.svg', { as: 'raw' })

export interface Props {
	decoration: CollectionEntry<'decorations'> | null
	selected: boolean
}

const { decoration, selected } = Astro.props
const id = Math.random().toString(16).slice(2)
---
<input type='radio' name='decoration' value={decoration?.id ?? '_null'} id={id} checked={selected} class='hidden' aria-hidden='true'/>
<label
	for={id}
	role='radio'
	class='flex flex-col items-center bg-gray-100 dark:bg-gray-700 px-4 py-2 border-2 rounded relative cursor-pointer dark:border-gray-500'
>
	<div
		aria-hidden='true'
		class='checked hidden rounded-full text-green-600 dark:text-green-500 bg-white dark:bg-gray-800 absolute -top-2 -right-2'
		set:html={checkedSvg}
	/>

	<div class='flex flex-col mb-3'>
		<span class='text-lg font-semibold text-center'>{decoration?.data.name ?? 'No decoration'}</span>
	</div>

	<div class='decoration text-gray-100 dark:text-gray-700 mb-4'>
		{decoration
			? (
				<>
					<div class='w-full h-full border-8 rounded-full' style={`border-color: ${decoration.data.color}`} />
					{decoration.data.elements.top_left && (
						<div
							class='element-top'
							set:html={DecorationElements[`../assets/decorations/${decoration.data.elements.top_left}`]()}
						/>
					)}
					{decoration.data.elements.bottom_right && (
						<div
							class='element-bottom'
							set:html={DecorationElements[`../assets/decorations/${decoration.data.elements.bottom_right}`]()}
						/>
					)}
				</>
			)
			: <div class='text-black dark:text-white' set:html={slashSvg}/>}
	</div>

	{decoration?.data.limited && (
		<div class='limited flex items-center gap-2'>
			<svg class='shrink-0 w-4' xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m5 2l.19.94a4 4 0 0 0 2.57 2.974L8 6l-.24.086A4 4 0 0 0 5.19 9.06L5 10l-.19-.94a4 4 0 0 0-2.57-2.974L2 6l.24-.086A4 4 0 0 0 4.81 2.94L5 2Zm3 14l.23 1.276a2 2 0 0 0 1.219 1.501L10 19l-.551.223a2 2 0 0 0-1.22 1.5L8 22l-.23-1.276a2 2 0 0 0-1.219-1.501L6 19l.551-.223a2 2 0 0 0 1.22-1.5L8 16Zm8-13l.556 2.654a8 8 0 0 0 5.213 5.92L23 12l-1.231.426a8 8 0 0 0-5.213 5.92L16 21l-.556-2.654a8 8 0 0 0-5.213-5.92L9 12l1.231-.426a8 8 0 0 0 5.213-5.92L16 3Z"></path></svg>
			<span class='uppercase text-xs font-bold text-center'>{decoration.data.collection} exclusive</span>
			<svg class='shrink-0 w-4' xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m5 2l.19.94a4 4 0 0 0 2.57 2.974L8 6l-.24.086A4 4 0 0 0 5.19 9.06L5 10l-.19-.94a4 4 0 0 0-2.57-2.974L2 6l.24-.086A4 4 0 0 0 4.81 2.94L5 2Zm3 14l.23 1.276a2 2 0 0 0 1.219 1.501L10 19l-.551.223a2 2 0 0 0-1.22 1.5L8 22l-.23-1.276a2 2 0 0 0-1.219-1.501L6 19l.551-.223a2 2 0 0 0 1.22-1.5L8 16Zm8-13l.556 2.654a8 8 0 0 0 5.213 5.92L23 12l-1.231.426a8 8 0 0 0-5.213 5.92L16 21l-.556-2.654a8 8 0 0 0-5.213-5.92L9 12l1.231-.426a8 8 0 0 0 5.213-5.92L16 3Z"></path></svg>
		</div>
	)}
</label>

<style>
	input:checked + label {
		@apply border-green-500 dark:border-green-400;
	}

	input:checked + label .checked {
		@apply block;
	}

	.limited {
		margin-left: -.5em;
		margin-right: -.5em;
	}

	.limited span {
		letter-spacing: .25em;
	}

	.decoration {
		position: relative;
		height: 80px;
		width: 80px;
	}

	.element-top {
		position: absolute;
		top: 0;
		left: 0;
		width: 50%;
		transform: translate(-25%, -25%);
	}

	.element-bottom {
		position: absolute;
		bottom: 0;
		right: 0;
		width: 50%;
		transform: translate(25%, 25%);
	}
</style>
