---
/*
 * Copyright (c) Cynthia Rey et al., All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import type { CollectionEntry } from 'astro:content'

import DecorationElement from './DecorationElement.astro'

import sparklesSvg from '@assets/sparkles.svg?raw'
import checkedSvg from 'feather-icons/dist/icons/check-circle.svg?raw'

export interface Props {
	decoration: CollectionEntry<'decorations'> | null | undefined
	selected?: boolean
	demo?: boolean
	noText?: boolean
}

const { decoration, selected, demo, noText } = Astro.props
const id = `decoration-${Math.random().toString(16).slice(2, 10)}`

type ColorDef = { c: string, o: string }
function definitionToColor (def: ColorDef[]) {
	return def.map(({ c, o }) => `${c} ${o}`).join(', ')
}

function makeGradientBorder (def: string) {
	return `border-color: transparent; background: linear-gradient(currentColor, currentColor) padding-box, ${def} border-box`
}

let style = ''
switch (decoration?.data.border.type) {
	case 'solid':
		style = `border-color: ${decoration.data.border.color}`
		break
	case 'linear-gradient': {
		let angle = decoration.data.border.angle
		if (angle === -1) angle = 45

		const gradient = definitionToColor(decoration.data.border.colors)
		style = makeGradientBorder(`linear-gradient(${angle}deg, ${gradient})`)
		break
	}
	case 'conic-gradient': {
		let angle = decoration.data.border.angle
		if (angle === -1) angle = -45
		if (angle === -2) angle = 135

		const gradient = definitionToColor(decoration.data.border.colors)
		style = makeGradientBorder(`conic-gradient(from ${angle}deg at 50% 50%, ${gradient})`)
		break
	}
}

const Element = demo ? 'div' : 'label'
---
{!demo && <input type='radio' name='decoration' value={decoration?.id ?? '_null'} id={id} checked={selected} class='hidden' aria-hidden='true'/>}
<Element
	for={demo ? void 0 : id}
	role={demo ? void  0 : 'radio'}
	class:list={[
		'flex flex-col items-center bg-gray-100 dark:bg-gray-700 px-4 py-2 border-2 rounded relative dark:border-gray-500',
		!demo && 'cursor-pointer'
	]}
>
	<div
		aria-hidden='true'
		class='checked hidden rounded-full text-green-600 dark:text-green-500 bg-white dark:bg-gray-800 absolute -top-2 -right-2'
		set:html={checkedSvg}
	/>

	<div class='flex flex-col mb-3'>
		<span class='text-lg font-semibold text-center'>{decoration?.data.name ?? 'No decoration'}</span>
	</div>

	<div class='w-20 h-20 text-gray-100 dark:text-gray-700 mb-4'>
		<DecorationElement decoration={decoration}/>
	</div>

	{decoration?.data.limited && !noText && (
		<div class='limited flex items-center gap-2'>
			<div class='shrink-0 w-4'>
				<Fragment set:html={sparklesSvg}/>
			</div>
			<span class='uppercase text-xs font-bold text-center'>{decoration.data.collection} exclusive</span>
			<div class='shrink-0 w-4'>
				<Fragment set:html={sparklesSvg}/>
			</div>
		</div>
	)}
</Element>

<style>
	input:checked + label {
		@apply border-green-500 dark:border-green-400;
	}

	input:checked + label .checked {
		@apply block;
	}

	.limited {
		margin-left: -.5em;
		margin-right: -.5em;
	}

	.limited span {
		letter-spacing: .25em;
	}
</style>
